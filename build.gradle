buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }

    }

    dependencies {
        classpath 'com.synopsys.integration:common-gradle-plugin:1.1.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:3.6.1'
    }
}

plugins {
    id 'application'
    id 'com.moowork.node' version '1.3.1'
}

// Copied from src/test/java - com.synopsys.integration.alert.TestTags
project.ext.junitPlatformCustomTestTags = 'BlackDuckConnection, DatabaseConnection, ExternalConnection'

project.ext.javaSourceCompatibility = JavaVersion.VERSION_11
project.ext.javaTargetCompatibility = JavaVersion.VERSION_11

project.ext.moduleName = 'com.synopsys.integration.alert.main'
mainClassName = 'com.synopsys.integration.alert.Application'

version = '6.0.3-SNAPSHOT'
def testContainerPostgresVersion = '12.2'

apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.synopsys.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
        testImplementation 'org.springframework.security:spring-security-test'
    }
}

subprojects {
    version = rootProject.version
    apply plugin: 'com.synopsys.integration.simple'

    license {
        header rootProject.file('LICENSE')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

// configure the version of the JaCoCo plugin to 0.8.2 which works for Java 11 until we switch to a gradle wrapper that includes 0.8.2+ by default.
jacoco {
    toolVersion = "0.8.5"
}

repositories {
    // Need this repository to resolve the spring-security-saml2-core dependencies
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    }
}

dependencies {
    implementation project(':alert-common')
    implementation project(':alert-database')

    // Spring
    implementation 'org.springframework:spring-webmvc'

    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework.security:spring-security-web'

    implementation 'org.springframework.security.extensions:spring-security-saml2-core:1.0.10.RELEASE'

    // Message Queue
    implementation 'org.apache.activemq:activemq-broker'

    // XML
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

    // =============
    // Test and Dev
    // =============
    testImplementation 'org.testcontainers:postgresql:1.12.5'
    if (getGradle().getStartParameter().taskNames.contains('runServer')) {
        runtimeClasspath 'org.testcontainers:postgresql:1.12.5'
    }
}

bootJar {
    launchScript()
}

distributions {
    boot {
        contents {
            from("$project.buildDir/libs/liquibase") {
                include 'h2*.jar'
                include 'liquibase-core*.jar'
                include 'logback-*.jar'
                include 'slf4j-api*.jar'
                include 'snakeyaml*.jar'
                into 'lib/liquibase'
            }
            from('src/main/resources/db/changelog-master.xml') { into 'upgradeResources' }
            from('src/main/resources/db/changelog/') { into 'upgradeResources/changelog/' }
            from('alert-database/src/main/resources/liquibase/release-locks-changelog.xml') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/export_h2_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/import_postgres_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/init_alert_db.sql') { into 'upgradeResources' }
            from('src/main/resources/images/') { into 'images/' }
            mkdir 'email/attachments'
        }
    }
}

task copyToLib(type: Copy, dependsOn: [compileJava]) {
    from findJar('h2', 'liquibase', 'logback-classic', 'logback-core', 'slf4j-api', 'snakeyaml')
    into "${project.buildDir}/libs/liquibase"
}

def findJar(Object... prefixes) {
    configurations.runtimeClasspath.filter { file ->
        prefixes.any { prefix -> file.name.startsWith(prefix)
        }
    }
}

tasks.compileJava.finalizedBy(tasks.copyToLib)

// run alert locally
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// disable the test task when running the alert server to speed up startup time.
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(runServer)) {
        compileTestJava.enabled = false
        test.enabled = false
    }
}

task createKeystore(type: com.synopsys.integration.alert.build.CreateKeystoreTask) {
    doFirst {
        mkdir "${project.buildDir}/certs"
    }
}

task createTruststore(type: Copy) {
    from "${System.getProperty('java.home')}/lib/security/"
    include 'cacerts'
    into "${project.buildDir}/certs/"
    rename 'cacerts', 'blackduck-alert.truststore'
}

task runServer(type: com.synopsys.integration.alert.build.RunServerTask, dependsOn: [build, createKeystore, createTruststore]) {
    postgresVersion = testContainerPostgresVersion
}

tasks.createKeystore.onlyIf { !file("${project.buildDir}/certs/blackduck-alert.keystore").exists() }
tasks.createTruststore.onlyIf { !file("${project.buildDir}/certs/blackduck-alert.truststore").exists() }
tasks.runServer.mustRunAfter(createKeystore)
tasks.runServer.mustRunAfter(createTruststore)

// Build tasks

task cleanBundles(type: Delete) {
    File testDatabaseDirectory = new File('testDB')
    if (testDatabaseDirectory.exists()) {
        println "Deleting ${testDatabaseDirectory.canonicalPath}"
        testDatabaseDirectory.deleteDir()
    }

    File staticResourcesDirectory = new File('src/main/static')
    if (staticResourcesDirectory.exists()) {
        println "Deleting ${staticResourcesDirectory.canonicalPath}"
        staticResourcesDirectory.deleteDir()
    }

    File emailFileDirectory = new File('email')
    if (emailFileDirectory.exists()) {
        println "Deleting ${emailFileDirectory.canonicalPath}"
        emailFileDirectory.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

task updateNpmVersion(type: Task) {
    final def packageJsonFile = new File("${projectDir}/package.json")
    def packageSlurper = new JsonSlurper()
    def packageJson = packageSlurper.parse file("${projectDir}/package.json")
    if (packageJson.version != version) {
        packageJson.version = version

        final def updatedPackageJson = JsonOutput.toJson(packageJson)

        packageJsonFile.delete()
        packageJsonFile << JsonOutput.prettyPrint(updatedPackageJson)
    }
}

npm_run() {
    args = ['build']
}

tasks.npm_run.mustRunAfter(updateNpmVersion)

task webpack(type: Exec) {
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.dir("$projectDir/src/main")

    commandLine "$projectDir/node_modules/.bin/webpack"
}

task createAboutText(type: Task) {
    final def aboutFile = new File("${projectDir}/src/main/resources/about.txt")
    aboutFile.delete()
    def readmeContentArray = new File("${projectDir}/README.md").text.readLines()
    def descriptionStart = readmeContentArray.indexOf("<!-- description-text-start -->") + 1
    def descriptionEnd = readmeContentArray.indexOf("<!-- description-text-end -->")
    def description = readmeContentArray.subList(descriptionStart, descriptionEnd).join(" ")

    def projectUrlStart = readmeContentArray.indexOf("<!-- project-url-text-start -->") + 1
    def projectUrlEnd = readmeContentArray.indexOf("<!-- project-url-text-end -->")
    def projectUrlText = readmeContentArray.subList(projectUrlStart, projectUrlEnd).join(" ")
    def gitUrl = projectUrlText.substring(projectUrlText.indexOf("https"))
    gitUrl = gitUrl.substring(0, gitUrl.indexOf("releases"))

    def time = new Date().format('yyyy-MM-dd\'T\'HH:mm:ss.SSSSSS\'Z\'');
    final def aboutJson = JsonOutput.toJson([version: version, projectUrl: gitUrl, description: description, created: time])
    logger.info("About text file: {} content: {}", aboutFile, aboutJson)
    aboutFile << aboutJson
}

task copyToTemplates(type: Copy, dependsOn: [npm_run]) {
    from "${project.buildDir}/resources/main/static/index.html"
    into "${project.buildDir}/resources/main/templates/"
}

tasks.compileJava.mustRunAfter(createAboutText)
tasks.compileJava.finalizedBy(copyToTemplates)

task copyDeploymentFiles(type: Copy) {
    from('deployment') {
        include "docker-swarm/**", "helm/synopsys-alert/**"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/standalone"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/standalone"
    }
    into "${project.buildDir}/deployment"

    doLast {
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/Chart.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/values.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/README.md", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
    }
}

task createDeploymentZip(type: Zip, dependsOn: [copyDeploymentFiles]) {
    from "${project.buildDir}/deployment"
    into "${project.name}-${project.version}-deployment"
    baseName "${project.name}"
    classifier 'deployment'
}

task helmLint(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "lint", "${project.buildDir}/deployment/helm/synopsys-alert/"
}

task helmDryRun(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "install", "alert", "${project.buildDir}/deployment/helm/synopsys-alert/", "-n", "alert", "--dry-run"
}

task helmPackage(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "package", "${project.buildDir}/deployment/helm/synopsys-alert/"
}

task helmValidation(dependsOn: [copyDeploymentFiles, helmLint, helmDryRun, helmPackage]) {
    helmLint.mustRunAfter copyDeploymentFiles
    helmDryRun.mustRunAfter helmLint
    helmPackage.mustRunAfter helmDryRun
}

task helmPushChart(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    doLast {
        if (!project.ext.isSnapshot) {
            // if we need to setup helm again to push the charts please run the following command to add the repo
            // helm repo add sig-cloudnative-local https://${System.env.ARTIFACTORY_HOST}/artifactory/sig-cloudnative-local
            commandLine "helm", "push-artifactory", "synopsys-alert*.tgz", "sig-cloudnative-local", "-u", "${project.ext.artifactoryDeployerUsername}", "-p", "${project.ext.artifactoryDeployerPassword}"
        } else {
            throw new GradleException("'Can not push SNAPSHOT helm charts'")
        }
    }
}

task untarArchiveForDocker(type: Copy, dependsOn: [build]) {
    from tarTree("${project.buildDir}/distributions/blackduck-alert-boot-${project.version}.tar")
    into "${project.buildDir}/docker"
}

task stageDocker(type: Copy, dependsOn: [untarArchiveForDocker]) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'docker-entrypoint.sh'
    }
    from("${project.buildDir}/distributions") {
        include "blackduck-alert-boot-${project.version}.tar"
    }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = ['VERSION': "${project.version}"]
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_INT_BLACKDUCK_USER", "--password", "$System.env.DOCKER_INT_BLACKDUCK_PASSWORD"
}

task pushImage(type: Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/distributions/${project.name}-${project.version}-deployment.zip"
            artifact(artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

tasks.dockerLogin.mustRunAfter(helmPushChart)

tasks.helmPushChart.mustRunAfter(helmValidation)

task all(dependsOn: [build, helmValidation, createDeploymentZip, dockerLogin, buildDockerImage, pushImage]) {
    helmValidation.mustRunAfter build
    createDeploymentZip.mustRunAfter helmValidation

    dockerLogin.mustRunAfter createDeploymentZip
    buildDockerImage.mustRunAfter dockerLogin

    pushImage.mustRunAfter buildDockerImage
}
